/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp service.xml -c SecretServiceAdaptor -l secrets/SecretService -i secrets/Secret.h -i SecretService.h -a SecretServiceAdaptor
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "SecretServiceAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class SecretServiceAdaptor
 */

SecretServiceAdaptor::SecretServiceAdaptor(SecretService *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

SecretServiceAdaptor::~SecretServiceAdaptor()
{
    // destructor
}

QList<QDBusObjectPath> SecretServiceAdaptor::collections() const
{
    // get the value of property Collections
    return qvariant_cast< QList<QDBusObjectPath> >(parent()->property("Collections"));
}

QDBusObjectPath SecretServiceAdaptor::CreateCollection(const QVariantMap &properties, const QString &alias, QDBusObjectPath &prompt)
{
    // handle method call org.freedesktop.Secret.Service.CreateCollection
    return parent()->CreateCollection(properties, alias, prompt);
}

SecretsList SecretServiceAdaptor::GetSecrets(const QList<QDBusObjectPath> &items, const QDBusObjectPath &session)
{
    // handle method call org.freedesktop.Secret.Service.GetSecrets
    return parent()->GetSecrets(items, session);
}

QList<QDBusObjectPath> SecretServiceAdaptor::Lock(const QList<QDBusObjectPath> &objects, QDBusObjectPath &Prompt)
{
    // handle method call org.freedesktop.Secret.Service.Lock
    return parent()->Lock(objects, Prompt);
}

QDBusVariant SecretServiceAdaptor::OpenSession(const QString &algorithm, const QDBusVariant &input, QDBusObjectPath &result)
{
    // handle method call org.freedesktop.Secret.Service.OpenSession
    return parent()->OpenSession(algorithm, input, result);
}

QDBusObjectPath SecretServiceAdaptor::ReadAlias(const QString &name)
{
    // handle method call org.freedesktop.Secret.Service.ReadAlias
    return parent()->ReadAlias(name);
}

QList<QDBusObjectPath> SecretServiceAdaptor::SearchItems(const QStringMap &attributes, QList<QDBusObjectPath> &locked)
{
    // handle method call org.freedesktop.Secret.Service.SearchItems
    return parent()->SearchItems(attributes, locked);
}

void SecretServiceAdaptor::SetAlias(const QString &name, const QDBusObjectPath &collection)
{
    // handle method call org.freedesktop.Secret.Service.SetAlias
    parent()->SetAlias(name, collection);
}

QList<QDBusObjectPath> SecretServiceAdaptor::Unlock(const QList<QDBusObjectPath> &objects, QDBusObjectPath &prompt)
{
    // handle method call org.freedesktop.Secret.Service.Unlock
    return parent()->Unlock(objects, prompt);
}

