/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp service.xml -c SecretServiceAdaptor -l secrets/SecretService -i secrets/Secret.h -i SecretService.h -a SecretServiceAdaptor
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef SECRETSERVICEADAPTOR_H_1428551258
#define SECRETSERVICEADAPTOR_H_1428551258

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "secrets/Secret.h"
#include "secrets/SecretService.h"
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface org.freedesktop.Secret.Service
 */
class SecretServiceAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.freedesktop.Secret.Service")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.freedesktop.Secret.Service\">\n"
"    <tp:docstring>\n"
"            The Secret Service manages all the sessions and collections.\n"
"        </tp:docstring>\n"
"    <property access=\"read\" type=\"ao\" name=\"Collections\">\n"
"      <tp:docstring>The object paths of all collections (ie: keyrings)</tp:docstring>\n"
"    </property>\n"
"    <method name=\"OpenSession\">\n"
"      <tp:docstring>Open a unique session for the caller application.</tp:docstring>\n"
"      <arg direction=\"in\" type=\"s\" name=\"algorithm\">\n"
"        <tp:docstring>The algorithm the caller wishes to use.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"in\" type=\"v\" name=\"input\">\n"
"        <tp:docstring>Input arguments for the algorithm.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"v\" name=\"output\">\n"
"        <tp:docstring>Output of the session algorithm negotiation.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"o\" name=\"result\">\n"
"        <tp:docstring>The object path of the session, if session was created.</tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"    <method name=\"CreateCollection\">\n"
"      <tp:docstring>Create a new collection with the specified properties.</tp:docstring>\n"
"      <arg direction=\"in\" type=\"a{sv}\" name=\"properties\">\n"
"        <tp:docstring xmlns:docbook=\"http://docbook.org/ns/docbook\">\n"
"          <para>\n"
"                        Properties for the new collection. This allows setting the new collection's\n"
"                        properties upon its creation. All READWRITE properties are useable. Specify\n"
"                        the property names in full interface.Property form.\n"
"                        <example>\n"
"              <title>Example for properties</title>\n"
"              <programlisting><![CDATA[\n"
"properties = { \"org.freedesktop.Secret.Collection.Label\": \"MyCollection\" }\n"
"]]></programlisting>\n"
"            </example>\n"
"          </para>\n"
"        </tp:docstring>\n"
"        <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"      </arg>\n"
"      <arg direction=\"in\" type=\"s\" name=\"alias\">\n"
"        <tp:docstring xmlns:docbook=\"http://docbook.org/ns/docbook\">\n"
"          <para>\n"
"                        If creating this connection for a well known alias then a string like\n"
"                        <literal>default</literal>. If an collection with this well-known alias already\n"
"                        exists, then that collection will be returned instead of creating a new\n"
"                        collection. Any readwrite properties provided to this function will be set on\n"
"                        the collection.\n"
"                    </para>\n"
"          <para>\n"
"                        Set this to an empty string if the new collection should not be associated with a\n"
"                        well known alias.\n"
"                    </para>\n"
"        </tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"o\" name=\"collection\">\n"
"        <tp:docstring>The new collection object, or '/' if prompting is necessary.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"o\" name=\"prompt\">\n"
"        <tp:docstring>A prompt object if prompting is necessary, or '/' if no prompt was needed.</tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"    <method name=\"SearchItems\">\n"
"      <tp:docstring>Find items in any collection.</tp:docstring>\n"
"      <arg direction=\"in\" type=\"a{ss}\" name=\"attributes\">\n"
"        <tp:docstring>Find secrets in any collection.</tp:docstring>\n"
"        <annotation value=\"QStringMap\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"ao\" name=\"unlocked\">\n"
"        <tp:docstring>Items found.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"ao\" name=\"locked\">\n"
"        <tp:docstring>Items found that require authentication.</tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"    <method name=\"Unlock\">\n"
"      <tp:docstring>Unlock the specified objects.</tp:docstring>\n"
"      <arg direction=\"in\" type=\"ao\" name=\"objects\">\n"
"        <tp:docstring>Objects to unlock.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"ao\" name=\"unlocked\">\n"
"        <tp:docstring>Objects that were unlocked without a prompt.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"o\" name=\"prompt\">\n"
"        <tp:docstring>A prompt object which can be used to unlock the remaining objects, or the special value '/' when no prompt is necessary.</tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"    <method name=\"Lock\">\n"
"      <tp:docstring>Lock the items.</tp:docstring>\n"
"      <arg direction=\"in\" type=\"ao\" name=\"objects\">\n"
"        <tp:docstring>Objects to lock.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"ao\" name=\"locked\">\n"
"        <tp:docstring>Objects that were locked without a prompt.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"o\" name=\"Prompt\">\n"
"        <tp:docstring>A prompt to lock the objects, or the special value '/' when no prompt is necessary.</tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"    <method name=\"GetSecrets\">\n"
"      <tp:docstring>Retrieve multiple secrets from different items.</tp:docstring>\n"
"      <arg direction=\"in\" type=\"ao\" name=\"items\">\n"
"        <tp:docstring>Items to get secrets for.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"in\" type=\"o\" name=\"session\">\n"
"        <tp:docstring>The session to use to encode the secrets.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" tp:type=\"ObjectPath_Secret_Map\" type=\"a{o(oayays)}\" name=\"secrets\">\n"
"        <tp:docstring>Secrets for the items.</tp:docstring>\n"
"        <annotation value=\"SecretsList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"      </arg>\n"
"    </method>\n"
"    <method name=\"ReadAlias\">\n"
"      <tp:docstring>Get the collection with the given alias.</tp:docstring>\n"
"      <arg direction=\"in\" type=\"s\" name=\"name\">\n"
"        <tp:docstring>An alias, such as 'default'.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"out\" type=\"o\" name=\"collection\">\n"
"        <tp:docstring>The collection or the the path '/' if no such collection exists.</tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"    <method name=\"SetAlias\">\n"
"      <tp:docstring>Setup a collection alias.</tp:docstring>\n"
"      <arg direction=\"in\" type=\"s\" name=\"name\">\n"
"        <tp:docstring>An alias, such as 'default'.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"in\" type=\"o\" name=\"collection\">\n"
"        <tp:docstring>\n"
"                    The collection to make the alias point to. To remove an alias use the special value '/'.\n"
"                </tp:docstring>\n"
"      </arg>\n"
"    </method>\n"
"    <signal name=\"CollectionCreated\">\n"
"      <tp:docstring>A collection was created.</tp:docstring>\n"
"      <arg type=\"o\" name=\"collection\">\n"
"        <tp:docstring>Collection that was created</tp:docstring>\n"
"      </arg>\n"
"    </signal>\n"
"    <signal name=\"CollectionDeleted\">\n"
"      <tp:docstring>A collection was deleted.</tp:docstring>\n"
"      <arg type=\"o\" name=\"collection\">\n"
"        <tp:docstring>Collection that was deleted.</tp:docstring>\n"
"      </arg>\n"
"    </signal>\n"
"    <signal name=\"CollectionChanged\">\n"
"      <tp:docstring>A collection was changed.</tp:docstring>\n"
"      <arg type=\"o\" name=\"collection\">\n"
"        <tp:docstring>Collection that was changed.</tp:docstring>\n"
"      </arg>\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    SecretServiceAdaptor(SecretService *parent);
    virtual ~SecretServiceAdaptor();

    inline SecretService *parent() const
    { return static_cast<SecretService *>(QObject::parent()); }

public: // PROPERTIES
    Q_PROPERTY(QList<QDBusObjectPath> Collections READ collections)
    QList<QDBusObjectPath> collections() const;

public Q_SLOTS: // METHODS
    QDBusObjectPath CreateCollection(const QVariantMap &properties, const QString &alias, QDBusObjectPath &prompt);
    SecretsList GetSecrets(const QList<QDBusObjectPath> &items, const QDBusObjectPath &session);
    QList<QDBusObjectPath> Lock(const QList<QDBusObjectPath> &objects, QDBusObjectPath &Prompt);
    QDBusVariant OpenSession(const QString &algorithm, const QDBusVariant &input, QDBusObjectPath &result);
    QDBusObjectPath ReadAlias(const QString &name);
    QList<QDBusObjectPath> SearchItems(const QStringMap &attributes, QList<QDBusObjectPath> &locked);
    void SetAlias(const QString &name, const QDBusObjectPath &collection);
    QList<QDBusObjectPath> Unlock(const QList<QDBusObjectPath> &objects, QDBusObjectPath &prompt);
Q_SIGNALS: // SIGNALS
    void CollectionChanged(const QDBusObjectPath &collection);
    void CollectionCreated(const QDBusObjectPath &collection);
    void CollectionDeleted(const QDBusObjectPath &collection);
};

#endif
